// Entry point: a program is a sequence of statements
program = _{ SOI ~ stmt* ~ EOI }

// Statements can be function declarations, function calls, loops, variable declarations, assignments, return statements, or print statements
stmt = _{ fn | fn_call ~ ";" | loop | var ~ ";" | assignment ~ ";" | return_stmt ~ ";" | print_stmt ~ ";" }

// Function declaration: "snuggle" identifier with optional parameters and return type, containing a body of statements
fn = { "snuggle" ~ ident ~ "(" ~ params_list? ~ ")" ~ ("->" ~ type)? ~ "{" ~ stmt* ~ "}" }

// Function call: identifier with optional arguments
fn_call = { ident ~ "(" ~ arg_list? ~ ")" }

// Print statement: "whisper" with arguments
print_stmt = { "whisper" ~ "(" ~ arg_list? ~ ")" }

// Identifiers: must start with a letter and can include alphanumeric characters
ident = @{ ASCII_ALPHA+ ~ ASCII_ALPHANUMERIC* }

// String literals
literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// Parameter list: a comma-separated list of parameters
params_list = { params ~ ("," ~ params)* }

// Parameters: identifier with type
params = { ident ~ ":" ~ type }

// Types: "bunny" rappresenting a number or "ribbon" rappresenting a string literal
type = { "bunny" | "ribbon" }

// Variable declaration: "cozy" identifier with type and initialization
var = { "cozy" ~ ident ~ ":" ~ type ~ "=" ~ expr }

// Assignment: identifier with an expr
assignment = { ident ~ "=" ~ expr }

// Expressions: can be numbers, additions, function calls, strings, or identifiers
expr = { number | math_expr | fn_call | literal | ident }

// Mathematical expressions: can be addition, subtraction, division, or multiplication
math_expr = { add | sub | div | mul }
add       = { ident ~ "+" ~ ident }
sub       = { ident ~ "-" ~ ident }
div       = { ident ~ "/" ~ ident }
mul       = { ident ~ "*" ~ ident }

// Loop: "tickle" identifier "in" function call with a body of statements
loop = { "tickle" ~ ident ~ "in" ~ fn_call ~ "{" ~ stmt* ~ "}" }

// Return statement: "blush" with identifier
return_stmt = { "blush" ~ ident }

// Argument list: a comma-separated list of arguments
arg_list = { arg ~ ("," ~ arg)* }

// Arguments: can be identifiers, numbers, or strings
arg = { ident | number | literal }

// Numbers: one or more digits
number = @{ ASCII_DIGIT+ }

// Whitespace and comments
WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE    = _{ "\r\n" | "\n" | "\r" }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* }
