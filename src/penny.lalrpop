use crate::ast::{Expr, Program, Stmt, Snuggle, Ty, Cozy, Call};

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*([^*/]|\*[^/]|/[^*])*\*/" => {},
    _
}

pub Program: Program = {
    <stmts:Stmt*> => Program { stmts }
}

Ident: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();

Stmt: Stmt = {
    "cozy" <ident:Ident> ":" <ty:Ty> "=" <expr:Expr> ";" => {
        Stmt::Cozy(Cozy { ident, ty, expr })
    },
    "snuggle" <ident:Ident> "()" "{" <stmts:Stmt*> "}" => {
        Stmt::Snuggle(Snuggle { ident, stmts })
    },
    <expr:Expr> ";" => Stmt::Expr(expr)
}

Expr: Expr = {
    r#""[^"]*""# => Expr::Ribbon(<>.to_string()),
    <ident:Ident> "(" <args:Comma<Expr>> ")" => Expr::Call(Call { ident, args}),
    <ident:Ident> "()" => Expr::Call(Call { ident, args: Vec::new() }),
    Ident => Expr::Variable(<>)
}

Ty: Ty = {
    "ribbon" => Ty::Ribbon,
    "bunny" => Ty::Bunny,
}


// Helper for comma-separated lists
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
